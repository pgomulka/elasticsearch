# copied from 7.x as-is but the compat header injected. This will not be necessary in the near future once the
# find/replace style of over ride is implemented and wired into the copy from the 7.x source. Compat header values will
# always be injected. Only specific assertions will need to be explict find/replaced and overriding an entire test
# like demonstrated here should not be needed in all but the rarest cases.
# Also note there is nothing special about the file/directory naming. just using <name>_compat as a convention.
# The different name also avoids any hard to troubleshoot which one is actually getting used questions.
# ./gradlew ':modules:ingest-common:yamlRestCompatTest' --tests "org.elasticsearch.ingest.common.IngestCommonClientYamlTestSuiteIT.test {yaml=ingest/80_foreach_compat/Test foreach Processor}" --info
---
setup:
  - skip:
      features: headers
---
teardown:
  - do:
      ingest.delete_pipeline:
        id: "my_pipeline"
        ignore: 404

---
"Test foreach Processor":
  - do:
      ingest.put_pipeline:
        id: "my_pipeline"
        body:  >
          {
            "description": "_description",
            "processors": [
              {
                "foreach" : {
                  "field" : "values",
                  "processor" : {
                      "uppercase" : {
                        "field" : "_ingest._value"
                      }
                  }
                }
              }
            ]
          }
  - match: { acknowledged: true }

  - do:
      headers:
        Content-Type: "application/vnd.elasticsearch+json;compatible-with=7"
        Accept: "application/vnd.elasticsearch+json;compatible-with=7"
      index:
        index: test
        type: test
        id: 1
        pipeline: "my_pipeline"
        body: >
          {
            "values": ["foo", "bar", "baz"]
          }

  - do:
      get:
        index: test
        type: test
        id: 1
  - match: { _source.values: ["FOO", "BAR", "BAZ"] }

  #exceeds the recurse max per thread and will runs some of these on a different thread
  - do:
      index:
        index: test
        id: 1
        pipeline: "my_pipeline"
        body: >
          {
            "values": ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u",
                       "v", "w", "x", "y", "z"]
          }

  - do:
      get:
        index: test
        id: 1
  - match: { _source.values: ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U",
                              "V", "W", "X", "Y", "Z"] }
