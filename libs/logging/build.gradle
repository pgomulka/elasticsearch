/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
import org.elasticsearch.gradle.transform.UnzipTransform
import org.gradle.api.internal.artifacts.ArtifactAttributes

import java.util.stream.Collectors
apply plugin: 'elasticsearch.build'
apply plugin: 'elasticsearch.publish'
def isImplAttr = Attribute.of("is.impl", Boolean)

configurations {
  providerImpl {
    attributes.attribute(ArtifactTypeDefinition.ARTIFACT_TYPE_ATTRIBUTE, ArtifactTypeDefinition.DIRECTORY_TYPE)
    attributes.attribute(isImplAttr, true)
  }
}

dependencies {
  compileOnly  project(':libs:elasticsearch-x-content')  // TODO: for JsonStringEncoder
  compileOnly  project(':libs:elasticsearch-cli')  // TODO: prob remove this, if just for exception types
//  api "org.apache.logging.log4j:log4j-api:${versions.log4j}" //TODO PG should we change compileOnly to something else?
//  api "org.apache.logging.log4j:log4j-core:${versions.log4j}"

  api "co.elastic.logging:log4j2-ecs-layout:${versions.ecsLogging}"
  api "co.elastic.logging:ecs-logging-core:${versions.ecsLogging}"

  testImplementation "com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedrunner}"
  testImplementation "junit:junit:${versions.junit}"
  api "org.hamcrest:hamcrest:${versions.hamcrest}" //

  testImplementation(project(":test:framework")) {
    exclude group: 'org.elasticsearch', module: 'elasticsearch-logging'
  }


  registerTransform(
    UnzipTransform.class, transformSpec -> {
    transformSpec.getFrom()
      .attribute(ArtifactTypeDefinition.ARTIFACT_TYPE_ATTRIBUTE, ArtifactTypeDefinition.JAR_TYPE)
      .attribute(isImplAttr, true)
    transformSpec.getTo()
      .attribute(ArtifactTypeDefinition.ARTIFACT_TYPE_ATTRIBUTE, ArtifactTypeDefinition.DIRECTORY_TYPE)
      .attribute(isImplAttr, true)
    transformSpec.parameters(parameters -> {
      parameters.includeArtifactName.set(true)
    })
  })

  providerImpl project(':libs:elasticsearch-logging:impl')

}

tasks.named('forbiddenApisMain').configure {
  // :libs:elasticsearch-core does not depend on server
  // TODO: Need to decide how we want to handle for forbidden signatures with the changes to server
  replaceSignatureFiles 'jdk-signatures'
}

tasks.named("compileJava").configure {
  options.compilerArgs.add("-Xlint:-requires-automatic")
  options.compilerArgs.add("-Xlint:-module") // qualified exports
  options.compilerArgs.add("-Xlint:-exports") // implements Message!!
}

tasks.named("thirdPartyAudit").configure {
  ignoreMissingClasses(
    // from com.fasterxml.jackson.dataformat.yaml.YAMLMapper (jackson-dataformat-yaml)

    // from log4j
    'com.conversantmedia.util.concurrent.SpinPolicy',
    'com.fasterxml.jackson.core.JsonGenerator',
    'com.fasterxml.jackson.core.JsonParser',
    'com.fasterxml.jackson.core.JsonParser$Feature',
    'com.fasterxml.jackson.core.JsonToken',
    'com.fasterxml.jackson.core.PrettyPrinter',
    'com.fasterxml.jackson.core.type.TypeReference',
    'com.fasterxml.jackson.dataformat.yaml.YAMLMapper',
    'com.fasterxml.jackson.databind.ObjectMapper',
    'com.fasterxml.jackson.databind.SerializationFeature',
    'com.fasterxml.jackson.annotation.JsonInclude$Include',
    'com.fasterxml.jackson.databind.DeserializationContext',
    'com.fasterxml.jackson.databind.DeserializationFeature',
    'com.fasterxml.jackson.databind.JsonMappingException',
    'com.fasterxml.jackson.databind.JsonNode',
    'com.fasterxml.jackson.databind.Module$SetupContext',
    'com.fasterxml.jackson.databind.ObjectReader',
    'com.fasterxml.jackson.databind.ObjectWriter',
    'com.fasterxml.jackson.databind.SerializerProvider',
    'com.fasterxml.jackson.databind.deser.std.StdDeserializer',
    'com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer',
    'com.fasterxml.jackson.databind.module.SimpleModule',
    'com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter',
    'com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider',
    'com.fasterxml.jackson.databind.ser.std.StdScalarSerializer',
    'com.fasterxml.jackson.databind.ser.std.StdSerializer',
    'com.fasterxml.jackson.dataformat.xml.JacksonXmlModule',
    'com.fasterxml.jackson.dataformat.xml.XmlMapper',
    'com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter',
    'org.fusesource.jansi.Ansi',
    'org.fusesource.jansi.AnsiRenderer$Code',
    'com.lmax.disruptor.EventFactory',
    'com.lmax.disruptor.EventTranslator',
    'com.lmax.disruptor.EventTranslatorTwoArg',
    'com.lmax.disruptor.EventTranslatorVararg',
    'com.lmax.disruptor.ExceptionHandler',
    'com.lmax.disruptor.LifecycleAware',
    'com.lmax.disruptor.RingBuffer',
    'com.lmax.disruptor.Sequence',
    'com.lmax.disruptor.SequenceReportingEventHandler',
    'com.lmax.disruptor.WaitStrategy',
    'com.lmax.disruptor.dsl.Disruptor',
    'com.lmax.disruptor.dsl.ProducerType',
    'javax.jms.Connection',
    'javax.jms.ConnectionFactory',
    'javax.jms.Destination',
    'javax.jms.JMSException',
    'javax.jms.MapMessage',
    'javax.jms.Message',
    'javax.jms.MessageConsumer',
    'javax.jms.MessageProducer',
    'javax.jms.Session',
    'javax.mail.Authenticator',
    'javax.mail.Message$RecipientType',
    'javax.mail.PasswordAuthentication',
    'javax.mail.Session',
    'javax.mail.Transport',
    'javax.mail.internet.InternetAddress',
    'javax.mail.internet.InternetHeaders',
    'javax.mail.internet.MimeMessage',
    'javax.mail.internet.MimeMultipart',
    'javax.mail.internet.MimeUtility',
    'org.apache.commons.compress.compressors.CompressorStreamFactory',
    'org.apache.commons.compress.utils.IOUtils',
    'org.apache.commons.csv.CSVFormat',
    'org.apache.commons.csv.QuoteMode',
    'org.apache.kafka.clients.producer.Producer',
    'org.apache.kafka.clients.producer.RecordMetadata',
    'org.codehaus.stax2.XMLStreamWriter2',
    'org.jctools.queues.MpscArrayQueue',
    'org.osgi.framework.Bundle',
    'org.osgi.framework.BundleActivator',
    'org.osgi.framework.BundleContext',
    'org.osgi.framework.BundleEvent',
    'org.osgi.framework.BundleReference',
    'org.osgi.framework.FrameworkUtil',
    'org.osgi.framework.ServiceRegistration',
    'org.osgi.framework.SynchronousBundleListener',
    'org.osgi.framework.wiring.BundleWire',
    'org.osgi.framework.wiring.BundleWiring',
    'org.zeromq.ZMQ$Context',
    'org.zeromq.ZMQ$Socket',
    'org.zeromq.ZMQ',
  )
}


File generatedResourcesDir = new File(buildDir, 'generated-resources')
def generateProviderManifest = tasks.register("generateProviderManifest") {
  File manifestFile = new File(generatedResourcesDir, "LISTING.TXT")
  inputs.property('jars', configurations.providerImpl)
  outputs.file(manifestFile)
  doLast {
    manifestFile.parentFile.mkdirs()
    manifestFile.setText(configurations.providerImpl.files.stream()
      .map(f -> f.name).collect(Collectors.joining('\n')), 'UTF-8')
  }
}

def generateProviderImpl = tasks.register("generateProviderImpl", Copy) {
  destinationDir = new File(generatedResourcesDir, "impl")
  into("IMPL-JARS/logging") {
    from(configurations.providerImpl)
    from(generateProviderManifest)
  }
}
sourceSets.main.output.dir(generateProviderImpl)
